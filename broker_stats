#!/usr/bin/env python
#
# Munin plugin to pull broker statistics from an ActiveMQ broker with the
# Statistics Plugin enabled. It's a bit dirty, really.
#

import time
import sys
import stomp
import json

class Listener(object):
    def on_error(self, header, message):
        print "ERROR: %s" % message

    def parse_json_list(self, lst):
        for value in lst:
            if   value["string"] == "enqueueCount":
                print "enqueued.value %d" % value["long"]
            elif value["string"] == "memoryUsage":
                print "memusage.value %d" % value["long"]
            elif value["string"] == "storeUsage":
                print "storeusage.value %d" % value["long"]
            elif value["string"] == "tempPercentUsage":
                print "temppercentusage.value %d" % value["int"]
            elif value["string"] == "consumerCount":
                print "consumers.value %d" % value["long"]
            elif value["string"] == "expiredCount":
                print "expired.value %d" % value["long"]
            elif value["string"] == "dispatchCount":
                print "dispatched.value %d" % value["long"]
            elif value["string"] == "storePercentUsage":
                print "storepercentusage.value %d" % value["int"]
            elif value["string"] == "dequeueCount":
                print "dequeued.value %d" % value["long"]
            elif value["string"] == "inflightCount":
                print "inflight.value %d" % value["long"]
            elif value["string"] == "messagesCached":
                print "cached.value %d" % value["long"]
            elif value["string"] == "memoryPercentUsage":
                print "mempercentusage.value %d" % value["int"]
            elif value["string"] == "tempUsage":
                print "tempusage.value %d" % value["long"]
            elif value["string"] == "producerCount":
                print "producers.value %d" % value["long"]

    def parse_json_dict(self, message):
        for key, value in message.items():
            if isinstance(value, dict):
                self.parse_json_dict(value)
            else:
                self.parse_json_list(value)

    def on_message(self, header, message):
        self.parse_json_dict(json.loads(message))

if (len(sys.argv) > 1) and (sys.argv[1] == "autoconf"):
    print "no"
    exit(0)

if (len(sys.argv) > 1) and (sys.argv[1] == "config"):
    print "graph_title ActiveMQ Broker Statistics"
    print "graph_args --base 1000 -l 0"
    print "graph_vlabel values"
    print "graph_category applications"
    print "graph_info various statistics about ActiveMQ"
    print "enqueued.label Messages Enqueued"
    print "enqueued.type COUNTER"
    print "dequeued.label Messages Dequeued"
    print "dequeued.type COUNTER"
    print "inflight.label Messages In Flight"
    print "inflight.type GAUGE"
    print "cached.label Messages Cached"
    print "cached.type GAUGE"
    print "memusage.label Memory Usage"
    print "memusage.type GAUGE"
    print "storeusage.label Store Usage"
    print "storeusage.type GAUGE"
    print "tempusage.label Temp Usage"
    print "tempusage.type GAUGE"
    print "temppercentusage.label Temp Percent Usage"
    print "temppercentusage.type GAUGE"
    print "temppercentusage.max 100"
    print "producers.label Producer Count"
    print "producers.type GAUGE"
    print "consumers.label Consumer Count"
    print "consumers.type GAUGE"
    print "expired.label Expired Messages"
    print "expired.type COUNTER"
    print "dispatched.label Dispatched Messages"
    print "dispatched.type COUNTER"
    print "storepercentusage.label Store Percent Usage"
    print "storepercentusage.type GAUGE"
    print "storepercentusage.max 100"
    print "mempercentusage.label Memory Percent Usage"
    print "mempercentusage.type GAUGE"
    print "mempercentusage.max 100"
    exit(0)

mq_host = "mq01"
mq_port = 61613

conn = stomp.Connection(
    host_and_ports = [ (mq_host, mq_port) ]
)
conn.set_listener('defult', Listener())
conn.start()

# make the connection
conn.connect()

# Subscribe to a queue where we will have the results sent
subscribe_headers = {
    "destination": "/queue/monitor-queue",
    "ack": "auto",
    "transformation": "jms-map-json"
}
conn.subscribe(subscribe_headers)

# send a blank message to the appropriate monitoring trigger queue, 
# setting the reply-to destination to the queue we subscribed to above
msg_headers = {
    "destination": "/queue/ActiveMQ.Statistics.Broker",
    "reply-to": "/queue/monitor-queue",
}
conn.send('', msg_headers)

time.sleep(2)
conn.disconnect()

