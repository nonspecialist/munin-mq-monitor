#!/usr/bin/env python
#
# Munin plugin to pull per-queue statistics from an ActiveMQ broker with the
# Statistics Plugin enabled. It's also quite a bit dirty.
#

import time
import sys
import stomp
import json
import string

class Listener(object):
    def on_error(self, header, message):
        print "ERROR: %s" % message

    def find_queue_name(self, lst):
        for value in lst:
            if isinstance(value["string"], list):
                for bit in value["string"]:
                    if bit != "destinationName":
                        return bit.encode('ascii', 'ignore').translate(
                                            string.maketrans(":/=-", "____"))
                    
    def parse_json_list(self, lst):
        qname = self.find_queue_name(lst)

        for value in lst:
            if   value["string"] == "enqueueCount":
                print "{0}.enqueued.value {1}".format(qname,value["long"])
            elif value["string"] == "memoryUsage":
                print "{0}.memusage.value {1}".format(qname, value["long"])
            elif value["string"] == "storeUsage":
                print "{0}.storeusage.value {1}".format(qname, value["long"])
            elif value["string"] == "tempPercentUsage":
                print "{0}.temppercentusage.value {1}".format(qname, value["int"])
            elif value["string"] == "consumerCount":
                print "{0}.consumers.value {1}".format(qname, value["long"])
            elif value["string"] == "expiredCount":
                print "{0}.expired.value {1}".format(qname, value["long"])
            elif value["string"] == "dispatchCount":
                print "{0}.dispatched.value {1}".format(qname, value["long"])
            elif value["string"] == "storePercentUsage":
                print "{0}.storepercentusage.value {1}".format(qname, value["int"])
            elif value["string"] == "dequeueCount":
                print "{0}.dequeued.value {1}".format(qname, value["long"])
            elif value["string"] == "inflightCount":
                print "{0}.inflight.value {1}".format(qname, value["long"])
            elif value["string"] == "messagesCached":
                print "{0}.cached.value {1}".format(qname, value["long"])
            elif value["string"] == "memoryPercentUsage":
                print "{0}.mempercentusage.value {1}".format(qname, value["int"])
            elif value["string"] == "tempUsage":
                print "{0}.tempusage.value {1}".format(qname, value["long"])
            elif value["string"] == "producerCount":
                print "{0}.producers.value {1}".format(qname, value["long"])
            elif value["string"] == "size":
                print "{0}.size.value {1}".format(qname, value["long"])
            elif value["string"] == "minEnqueueTime":
                print "{0}.minenqueuetime.value {1}".format(qname, value["double"])
            elif value["string"] == "maxEnqueueTime":
                print "{0}.minenqueuetime.value {1}".format(qname, value["double"])
            elif value["string"] == "averageEnqueueTime":
                print "{0}.averageenqueuetime.value {1}".format(qname, value["double"])
            elif value["string"] == "memoryLimit":
                print "{0}.minenqueuetime.value {1}".format(qname, value["long"])
            elif type(value["string"]) == list:
		# we cannot parse this into a metric really
                pass
            else:
                print "Don't know what to do with {0}".format(value)

    def parse_json_dict(self, message):
        for key, value in message.items():
            if isinstance(value, dict):
                self.parse_json_dict(value)
            else:
                self.parse_json_list(value)

    def on_message(self, header, message):
        self.parse_json_dict(json.loads(message))

if (len(sys.argv) > 1) and (sys.argv[1] == "autoconf"):
    print "no"
    exit(0)

if (len(sys.argv) > 1) and (sys.argv[1] == "config"):
    print "graph_title ActiveMQ Queue Statistics"
    print "graph_args --base 1000 -l 0"
    print "graph_vlabel values"
    print "graph_category applications"
    print "graph_info various statistics about ActiveMQ Queues"
    exit(0)

mq_host = "mq01"
mq_port = 61613

conn = stomp.Connection(
    host_and_ports = [ (mq_host, mq_port) ]
)
conn.set_listener('defult', Listener())
conn.start()

# make the connection
conn.connect()

# Subscribe to a queue where we will have the results sent
subscribe_headers = {
    "destination": "/queue/monitor-queue",
    "ack": "auto",
    "transformation": "jms-map-json"
}
conn.subscribe(subscribe_headers)

# send a blank message to the appropriate monitoring trigger queue, 
# setting the reply-to destination to the queue we subscribed to above
msg_headers = {
    "destination": "/queue/ActiveMQ.Statistics.Destination.*",
    "reply-to": "/queue/monitor-queue",
}
conn.send('', msg_headers)

time.sleep(2)
conn.disconnect()

